;;
;;  Copyright (C) 2019 Roman Pauer
;;
;;  Permission is hereby granted, free of charge, to any person obtaining a copy of
;;  this software and associated documentation files (the "Software"), to deal in
;;  the Software without restriction, including without limitation the rights to
;;  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
;;  of the Software, and to permit persons to whom the Software is furnished to do
;;  so, subject to the following conditions:
;;
;;  The above copyright notice and this permission notice shall be included in all
;;  copies or substantial portions of the Software.
;;
;;  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;;  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;;  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;;  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;;  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;;  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;;  SOFTWARE.
;;

include llasm.llinc
include asm-calls.llinc

func DirectSoundCreate_c *lpGuid, *ppDS, *pUnkOuter

func IDirectSound_QueryInterface_c *lpThis, *riid, *ppvObj
func IDirectSound_AddRef_c *lpThis
func IDirectSound_Release_c *lpThis
func IDirectSound_CreateSoundBuffer_c *lpThis, *pcDSBufferDesc, *ppDSBuffer, *pUnkOuter
func IDirectSound_GetCaps_c *lpThis, *pDSCaps
func IDirectSound_DuplicateSoundBuffer_c *lpThis, *pDSBufferOriginal, *ppDSBufferDuplicate
func IDirectSound_SetCooperativeLevel_c *lpThis, *hwnd, dwLevel
func IDirectSound_Compact_c *lpThis
func IDirectSound_GetSpeakerConfig_c *lpThis, *pdwSpeakerConfig
func IDirectSound_SetSpeakerConfig_c *lpThis, dwSpeakerConfig
func IDirectSound_Initialize_c *lpThis, *pcGuidDevice

func IDirectSoundBuffer_QueryInterface_c *lpThis, *riid, *ppvObj
func IDirectSoundBuffer_AddRef_c *lpThis
func IDirectSoundBuffer_Release_c *lpThis
func IDirectSoundBuffer_GetCaps_c *lpThis, *pDSBufferCaps
func IDirectSoundBuffer_GetCurrentPosition_c *lpThis, *pdwCurrentPlayCursor, *pdwCurrentWriteCursor
func IDirectSoundBuffer_GetFormat_c *lpThis, *pwfxFormat, dwSizeAllocated, *pdwSizeWritten
func IDirectSoundBuffer_GetVolume_c *lpThis, *plVolume
func IDirectSoundBuffer_GetPan_c *lpThis, *plPan
func IDirectSoundBuffer_GetFrequency_c *lpThis, *pdwFrequency
func IDirectSoundBuffer_GetStatus_c *lpThis, *pdwStatus
func IDirectSoundBuffer_Initialize_c *lpThis, *pDirectSound, *pcDSBufferDesc
func IDirectSoundBuffer_Lock_c *lpThis, dwOffset, dwBytes, *ppvAudioPtr1, *pdwAudioBytes1, *ppvAudioPtr2, *pdwAudioBytes2, dwFlags
func IDirectSoundBuffer_Play_c *lpThis, dwReserved1, dwPriority, dwFlags
func IDirectSoundBuffer_SetCurrentPosition_c *lpThis, dwNewPosition
func IDirectSoundBuffer_SetFormat_c *lpThis, *pcfxFormat
func IDirectSoundBuffer_SetVolume_c *lpThis, lVolume
func IDirectSoundBuffer_SetPan_c *lpThis, lPan
func IDirectSoundBuffer_SetFrequency_c *lpThis, dwFrequency
func IDirectSoundBuffer_Stop_c *lpThis
func IDirectSoundBuffer_Unlock_c *lpThis, *pvAudioPtr1, dwAudioBytes1, *pvAudioPtr2, dwAudioBytes2
func IDirectSoundBuffer_Restore_c *lpThis

proc DirectSoundCreate_asm2c public

; [esp + 3*4] = LPUNKNOWN pUnkOuter
; [esp + 2*4] = LPDIRECTSOUND* ppDS
; [esp +   4] = LPGUID lpGuid
; [esp      ] = return address

        Call_Asm_Stack3 DirectSoundCreate_c

        Call_Asm_Return 3

endp ; end procedure DirectSoundCreate_asm2c


proc IDirectSound_QueryInterface_asm2c public

; [esp + 3*4] = LPVOID * ppvObj
; [esp + 2*4] = REFIID riid
; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack3 IDirectSound_QueryInterface_c

        Call_Asm_Return 3

endp ; end procedure IDirectSound_QueryInterface_asm2c


proc IDirectSound_AddRef_asm2c public

; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack1 IDirectSound_AddRef_c

        Call_Asm_Return 1

endp ; end procedure IDirectSound_AddRef_asm2c


proc IDirectSound_Release_asm2c public

; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack1 IDirectSound_Release_c

        Call_Asm_Return 1

endp ; end procedure IDirectSound_Release_asm2c


proc IDirectSound_CreateSoundBuffer_asm2c public

; [esp + 4*4] = LPUNKNOWN pUnkOuter
; [esp + 3*4] = LPDIRECTSOUNDBUFFER * ppDSBuffer
; [esp + 2*4] = LPCDSBUFFERDESC pcDSBufferDesc
; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack4 IDirectSound_CreateSoundBuffer_c

        Call_Asm_Return 4

endp ; end procedure IDirectSound_CreateSoundBuffer_asm2c


proc IDirectSound_GetCaps_asm2c public

; [esp + 2*4] = LPDSCAPS pDSCaps
; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSound_GetCaps_c

        Call_Asm_Return 2

endp ; end procedure IDirectSound_GetCaps_asm2c


proc IDirectSound_DuplicateSoundBuffer_asm2c public

; [esp + 3*4] = LPDIRECTSOUNDBUFFER * ppDSBufferDuplicate
; [esp + 2*4] = LPDIRECTSOUNDBUFFER pDSBufferOriginal
; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack3 IDirectSound_DuplicateSoundBuffer_c

        Call_Asm_Return 3

endp ; end procedure IDirectSound_DuplicateSoundBuffer_asm2c


proc IDirectSound_SetCooperativeLevel_asm2c public

; [esp + 3*4] = DWORD dwLevel
; [esp + 2*4] = HWND hwnd
; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack3 IDirectSound_SetCooperativeLevel_c

        Call_Asm_Return 3

endp ; end procedure IDirectSound_SetCooperativeLevel_asm2c


proc IDirectSound_Compact_asm2c public

; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack1 IDirectSound_Compact_c

        Call_Asm_Return 1

endp ; end procedure IDirectSound_Compact_asm2c


proc IDirectSound_GetSpeakerConfig_asm2c public

; [esp + 2*4] = LPDWORD pdwSpeakerConfig
; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSound_GetSpeakerConfig_c

        Call_Asm_Return 2

endp ; end procedure IDirectSound_GetSpeakerConfig_asm2c


proc IDirectSound_SetSpeakerConfig_asm2c public

; [esp + 2*4] = DWORD dwSpeakerConfig
; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSound_SetSpeakerConfig_c

        Call_Asm_Return 2

endp ; end procedure IDirectSound_SetSpeakerConfig_asm2c


proc IDirectSound_Initialize_asm2c public

; [esp + 2*4] = LPCGUID pcGuidDevice
; [esp +   4] = struct IDirectSound *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSound_Initialize_c

        Call_Asm_Return 2

endp ; end procedure IDirectSound_Initialize_asm2c


proc IDirectSoundBuffer_QueryInterface_asm2c public

; [esp + 3*4] = LPVOID * ppvObj
; [esp + 2*4] = REFIID riid
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack3 IDirectSoundBuffer_QueryInterface_c

        Call_Asm_Return 3

endp ; end procedure IDirectSoundBuffer_QueryInterface_asm2c


proc IDirectSoundBuffer_AddRef_asm2c public

; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack1 IDirectSoundBuffer_AddRef_c

        Call_Asm_Return 1

endp ; end procedure IDirectSoundBuffer_AddRef_asm2c


proc IDirectSoundBuffer_Release_asm2c public

; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack1 IDirectSoundBuffer_Release_c

        Call_Asm_Return 1

endp ; end procedure IDirectSoundBuffer_Release_asm2c


proc IDirectSoundBuffer_GetCaps_asm2c public

; [esp + 2*4] = LPDSBCAPS pDSBufferCaps
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_GetCaps_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_GetCaps_asm2c


proc IDirectSoundBuffer_GetCurrentPosition_asm2c public

; [esp + 3*4] = LPDWORD pdwCurrentWriteCursor
; [esp + 2*4] = LPDWORD pdwCurrentPlayCursor
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack3 IDirectSoundBuffer_GetCurrentPosition_c

        Call_Asm_Return 3

endp ; end procedure IDirectSoundBuffer_GetCurrentPosition_asm2c


proc IDirectSoundBuffer_GetFormat_asm2c public

; [esp + 4*4] = LPDWORD pdwSizeWritten
; [esp + 3*4] = DWORD dwSizeAllocated
; [esp + 2*4] = LPWAVEFORMATEX pwfxFormat
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack4 IDirectSoundBuffer_GetFormat_c

        Call_Asm_Return 4

endp ; end procedure IDirectSoundBuffer_GetFormat_asm2c


proc IDirectSoundBuffer_GetVolume_asm2c public

; [esp + 2*4] = LPLONG plVolume
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_GetVolume_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_GetVolume_asm2c


proc IDirectSoundBuffer_GetPan_asm2c public

; [esp + 2*4] = LPLONG plPan
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_GetPan_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_GetPan_asm2c


proc IDirectSoundBuffer_GetFrequency_asm2c public

; [esp + 2*4] = LPDWORD pdwFrequency
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_GetFrequency_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_GetFrequency_asm2c


proc IDirectSoundBuffer_GetStatus_asm2c public

; [esp + 2*4] = LPDWORD pdwStatus
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_GetStatus_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_GetStatus_asm2c


proc IDirectSoundBuffer_Initialize_asm2c public

; [esp + 3*4] = LPCDSBUFFERDESC pcDSBufferDesc
; [esp + 2*4] = LPDIRECTSOUND pDirectSound
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack3 IDirectSoundBuffer_Initialize_c

        Call_Asm_Return 3

endp ; end procedure IDirectSoundBuffer_Initialize_asm2c


proc IDirectSoundBuffer_Lock_asm2c public

; [esp + 8*4] = DWORD dwFlags
; [esp + 7*4] = LPDWORD pdwAudioBytes2
; [esp + 6*4] = LPVOID * ppvAudioPtr2
; [esp + 5*4] = LPDWORD pdwAudioBytes1
; [esp + 4*4] = LPVOID * ppvAudioPtr1
; [esp + 3*4] = DWORD dwBytes
; [esp + 2*4] = DWORD dwOffset
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack8 IDirectSoundBuffer_Lock_c

        Call_Asm_Return 8

endp ; end procedure IDirectSoundBuffer_Lock_asm2c


proc IDirectSoundBuffer_Play_asm2c public

; [esp + 4*4] = DWORD dwFlags
; [esp + 3*4] = DWORD dwPriority
; [esp + 2*4] = DWORD dwReserved1
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack4 IDirectSoundBuffer_Play_c

        Call_Asm_Return 4

endp ; end procedure IDirectSoundBuffer_Play_asm2c


proc IDirectSoundBuffer_SetCurrentPosition_asm2c public

; [esp + 2*4] = DWORD dwNewPosition
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_SetCurrentPosition_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_SetCurrentPosition_asm2c


proc IDirectSoundBuffer_SetFormat_asm2c public

; [esp + 2*4] = LPCWAVEFORMATEX pcfxFormat
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_SetFormat_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_SetFormat_asm2c


proc IDirectSoundBuffer_SetVolume_asm2c public

; [esp + 2*4] = LONG lVolume
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_SetVolume_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_SetVolume_asm2c


proc IDirectSoundBuffer_SetPan_asm2c public

; [esp + 2*4] = LONG lPan
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_SetPan_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_SetPan_asm2c


proc IDirectSoundBuffer_SetFrequency_asm2c public

; [esp + 2*4] = DWORD dwFrequency
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack2 IDirectSoundBuffer_SetFrequency_c

        Call_Asm_Return 2

endp ; end procedure IDirectSoundBuffer_SetFrequency_asm2c


proc IDirectSoundBuffer_Stop_asm2c public

; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack1 IDirectSoundBuffer_Stop_c

        Call_Asm_Return 1

endp ; end procedure IDirectSoundBuffer_Stop_asm2c


proc IDirectSoundBuffer_Unlock_asm2c public

; [esp + 5*4] = DWORD dwAudioBytes2
; [esp + 4*4] = LPVOID pvAudioPtr2
; [esp + 3*4] = DWORD dwAudioBytes1
; [esp + 2*4] = LPVOID pvAudioPtr1
; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack5 IDirectSoundBuffer_Unlock_c

        Call_Asm_Return 5

endp ; end procedure IDirectSoundBuffer_Unlock_asm2c


proc IDirectSoundBuffer_Restore_asm2c public

; [esp +   4] = struct IDirectSoundBuffer *lpThis
; [esp      ] = return address

        Call_Asm_Stack1 IDirectSoundBuffer_Restore_c

        Call_Asm_Return 1

endp ; end procedure IDirectSoundBuffer_Restore_asm2c



datasegment dsound_data constant

dlabel IDirectSoundVtbl_asm2c global
daddr IDirectSound_QueryInterface_asm2c
daddr IDirectSound_AddRef_asm2c
daddr IDirectSound_Release_asm2c
daddr IDirectSound_CreateSoundBuffer_asm2c
daddr IDirectSound_GetCaps_asm2c
daddr IDirectSound_DuplicateSoundBuffer_asm2c
daddr IDirectSound_SetCooperativeLevel_asm2c
daddr IDirectSound_Compact_asm2c
daddr IDirectSound_GetSpeakerConfig_asm2c
daddr IDirectSound_SetSpeakerConfig_asm2c
daddr IDirectSound_Initialize_asm2c

dlabel IDirectSoundBufferVtbl_asm2c global
daddr IDirectSoundBuffer_QueryInterface_asm2c
daddr IDirectSoundBuffer_AddRef_asm2c
daddr IDirectSoundBuffer_Release_asm2c
daddr IDirectSoundBuffer_GetCaps_asm2c
daddr IDirectSoundBuffer_GetCurrentPosition_asm2c
daddr IDirectSoundBuffer_GetFormat_asm2c
daddr IDirectSoundBuffer_GetVolume_asm2c
daddr IDirectSoundBuffer_GetPan_asm2c
daddr IDirectSoundBuffer_GetFrequency_asm2c
daddr IDirectSoundBuffer_GetStatus_asm2c
daddr IDirectSoundBuffer_Initialize_asm2c
daddr IDirectSoundBuffer_Lock_asm2c
daddr IDirectSoundBuffer_Play_asm2c
daddr IDirectSoundBuffer_SetCurrentPosition_asm2c
daddr IDirectSoundBuffer_SetFormat_asm2c
daddr IDirectSoundBuffer_SetVolume_asm2c
daddr IDirectSoundBuffer_SetPan_asm2c
daddr IDirectSoundBuffer_SetFrequency_asm2c
daddr IDirectSoundBuffer_Stop_asm2c
daddr IDirectSoundBuffer_Unlock_asm2c
daddr IDirectSoundBuffer_Restore_asm2c

endd
